apply plugin: 'com.android.library'

def version = "v1.0.9.1";
android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        minSdkVersion 14
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    dexOptions {
        preDexLibraries false
        maxProcessCount 8
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        warningsAsErrors false
        disable "UnusedResources"
        textOutput "stdout"
        textReport false
    }
}
// 忽略文档编译错误. 设置编码
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

dependencies {
//    implementation fileTree(include: ['*.jar'], dir: 'libs')
}


/** ****************************************************************/
/**************************** 编译 ****************************/
/** ****************************************************************/

//task releaseJar(type: Copy,dependsOn: [copyWithApp, copyWithOutApp]) {
task releaseJar(type: Copy) {
    from("build/intermediates/bundles/release")
    into "../release"
    include("classes.jar")
    rename("classes.jar", "floatwindow_" + version + ".jar")
}

task release(type: Copy, dependsOn: [releaseJar]) {
    from("build/outputs/aar")
    into "../release"
    include("floatwindow-release.aar")
    rename("floatwindow-release.aar", "floatwindow_" + version + ".aar")
}

release.dependsOn build
